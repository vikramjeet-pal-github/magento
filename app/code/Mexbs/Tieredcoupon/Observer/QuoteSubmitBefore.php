<?php
namespace Mexbs\Tieredcoupon\Observer;

use Magento\Framework\Event\Observer as EventObserver;
use Magento\Framework\Event\ObserverInterface;

class QuoteSubmitBefore implements ObserverInterface
{
    protected $ruleFactory;
    protected $tieredCouponFactory;
    protected $autogeneratedTieredCouponFactory;


    public function __construct(
        \Magento\SalesRule\Model\RuleFactory $ruleFactory,
        \Mexbs\Tieredcoupon\Model\TieredcouponFactory $tieredCouponFactory,
        \Mexbs\Tieredcoupon\Model\AutogeneratedFactory $autogeneratedTieredCouponFactory
    ) {
        $this->ruleFactory = $ruleFactory;
        $this->tieredCouponFactory = $tieredCouponFactory;
        $this->autogeneratedTieredCouponFactory = $autogeneratedTieredCouponFactory;
    }

    /**
     * @param EventObserver $observer
     * @return $this
     */
    public function execute(EventObserver $observer)
    {
        $order = $observer->getOrder();
        $couponCode = $order->getCouponCode();

        if (empty($couponCode)) {
            return $this;
        }

        $tieredCoupon = $this->tieredCouponFactory->create()->load($couponCode, 'code');
        if($tieredCoupon->getId()){
            $order->setCouponRuleName($tieredCoupon->getName());
        }else{
            $autogeneratedTieredCoupon = $this->autogeneratedTieredCouponFactory->create()->load($couponCode, 'code');
            if($autogeneratedTieredCoupon->getId()){
                $autogeneratedTieredCoupon->setTimesUsed($autogeneratedTieredCoupon->getTimesUsed()+1)->save();
                $associatedTieredCoupon = $this->tieredCouponFactory->create()->load($autogeneratedTieredCoupon->getTieredcouponId());
                $order->setCouponRuleName($associatedTieredCoupon->getName());
            }
        }

        return $this;
    }
}
