<?php
namespace Mexbs\Tieredcoupon\Controller\Adminhtml\Coupon;

use Magento\Framework\App\Action\HttpPostActionInterface;
use Magento\SalesRule\Api\Data\CouponGenerationSpecInterfaceFactory;


class Generate extends \Mexbs\Tieredcoupon\Controller\Adminhtml\Coupon\Tieredcoupon
{
    const MAX_GENERATE_ATTEMPTS = 10;

    private $_coreRegistry;
    private $_dateFilter;
    private $autogeneratedTieredCouponFactory;
    private $salesRuleCoupon;
    private $jsonHelper;
    private $logger;
    private $resource;
    private $connection;


    public function __construct(
        \Magento\Backend\App\Action\Context $context,
        \Magento\Framework\Registry $coreRegistry,
        \Magento\Framework\App\Response\Http\FileFactory $fileFactory,
        \Magento\Framework\Stdlib\DateTime\Filter\Date $dateFilter,
        \Mexbs\Tieredcoupon\Model\AutogeneratedFactory $autogeneratedTieredCouponFactory,
        \Magento\SalesRule\Helper\Coupon $salesRuleCoupon,
        \Magento\Framework\Json\Helper\Data $jsonHelper,
        \Psr\Log\LoggerInterface $logger,
        \Magento\Framework\App\ResourceConnection $resource
    ) {
        parent::__construct(
            $context
        );
        $this->_coreRegistry = $coreRegistry;
        $this->_dateFilter = $dateFilter;
        $this->autogeneratedTieredCouponFactory = $autogeneratedTieredCouponFactory;
        $this->salesRuleCoupon = $salesRuleCoupon;
        $this->jsonHelper = $jsonHelper;
        $this->logger = $logger;
        $this->resource = $resource;
        $this->connection = $resource->getConnection();
    }

    protected function isAutogeneratedCouponExists($code){
        $select = $this->connection->select()
            ->from($this->resource->getTableName('mexbs_tieredcoupon_autogenerated'), ['count' => (new \Zend_Db_Expr("count(*)"))])
            ->where($this->connection->quoteInto("code=?", $code));
        $col = $this->connection->fetchCol($select);
        if($col && isset($col[0]) && $col[0]>0){
            return true;
        }

        $select = $this->connection->select()
            ->from($this->resource->getTableName('salesrule_coupon'), ['count' => (new \Zend_Db_Expr("count(*)"))])
            ->where($this->connection->quoteInto("code=?", $code));
        $col = $this->connection->fetchCol($select);
        if($col && isset($col[0]) && $col[0]>0){
            return true;
        }

        $select = $this->connection->select()
            ->from($this->resource->getTableName('mexbs_tieredcoupon'), ['count' => (new \Zend_Db_Expr("count(*)"))])
            ->where($this->connection->quoteInto("code=?", $code));
        $col = $this->connection->fetchCol($select);
        if($col && isset($col[0]) && $col[0]>0){
            return true;
        }

        return false;
    }

    protected function generateCode($data)
    {
        $format = $data['format'];
        if (empty($format)) {
            $format = \Magento\SalesRule\Helper\Coupon::COUPON_FORMAT_ALPHANUMERIC;
        }

        $splitChar = '-';
        $charset = $this->salesRuleCoupon->getCharset($format);

        $code = '';
        $charsetSize = count($charset);
        $split = max(0, (int)$data['dash']);
        $length = max(1, (int)$data['length']);
        for ($i = 0; $i < $length; ++$i) {
            $char = $charset[\Magento\Framework\Math\Random::getRandomNumber(0, $charsetSize - 1)];
            if (($split > 0) && (($i % $split) === 0) && ($i !== 0)) {
                $char = $splitChar . $char;
            }
            $code .= $char;
        }
        return $data['prefix'] . $code . $data['suffix'];
    }

    protected function generateCodes($generationData, $tieredcouponId){
        $generatedCount = 0;
        $generatedCodes = [];
        $size = $generationData['qty'];
        $maxAttempts = self::MAX_GENERATE_ATTEMPTS;

        $autogeneratedTieredCoupon = $this->autogeneratedTieredCouponFactory->create();

        for ($i = 0; $i < $size; $i++) {
            $attempt = 0;
            do {
                if ($attempt >= $maxAttempts) {
                    throw new \Magento\Framework\Exception\LocalizedException(
                        __('We cannot create the requested Coupon Qty. Please check your settings and try again.')
                    );
                }
                $code = $this->generateCode($generationData);
                ++$attempt;
            } while ($this->isAutogeneratedCouponExists($code));

            $autogeneratedTieredCoupon->setId(null)
                ->setTieredcouponId($tieredcouponId)
                ->setCode($code)
                ->save();

            $generatedCount += 1;
            $generatedCodes[] = $code;
        }

        return $generatedCodes;
    }

    public function execute()
    {
        if (!$this->getRequest()->isAjax()) {
            $this->_forward('noroute');
            return;
        }
        $result = [];
        $this->_initTieredcoupon();

        $tieredCoupon = $this->_coreRegistry->registry(\Mexbs\Tieredcoupon\Model\RegistryConstants::CURRENT_COUPON);

        if (!$tieredCoupon->getId()) {
            $result['error'] = __('Rule is not defined');
        } else {
            try {
                $generationData = $this->getRequest()->getParams();

                $couponCodes = $this->generateCodes($generationData, $tieredCoupon->getId());
                $generated = count($couponCodes);
                $this->messageManager->addSuccess(__('%1 coupon(s) have been generated.', $generated));
                $this->_view->getLayout()->initMessages();
                $result['messages'] = $this->_view->getLayout()->getMessagesBlock()->getGroupedHtml();
            } catch (\Magento\Framework\Exception\InputException $inputException) {
                $result['error'] = __('Invalid data provided');
            } catch (\Magento\Framework\Exception\LocalizedException $e) {
                $result['error'] = $e->getMessage();
            } catch (\Exception $e) {
                $result['error'] = __(
                    'Something went wrong while generating coupons. Please review the log and try again.'
                );
                $this->logger->critical($e);
            }
        }
        $this->getResponse()->representJson(
            $this->jsonHelper->jsonEncode($result)
        );
    }
}
