{
  "description": "Set of VCLs required to integrate Netacea services. Please note for full functionality Fastly support needs to enable proper handling of POST requests. Do not enable unless this has been done.",
  "id": "netacea_integration",
  "name": "Netacea Bot Detection integration",
  "properties": [
    {
      "description": "API Key",
      "label": "Netacea API Key",
      "name": "netacea_api_key",
      "required": true,
      "type": "string"
    },
    {
      "description": "Secret",
      "label": "Netacea Secret",
      "name": "netacea_secret",
      "required": true,
      "type": "string"
    }
  ],
  "vcl": [
    {
      "priority": 45,
      "template": "  # Change the shielding condition to account for restarts due to bot detection\n  set var.fastly_req_do_shield = (req.restarts <= 1);\n  # Reenable clustering. It gets turned off on restarts\n  set req.http.Fastly-Force-Shield = \"1\";\n\n  # Invoke Netacea Bot Detection checking\n  call netacea_recv;\n",
      "type": "recv"
    },
    {
      "priority": 45,
      "template": "  call netacea_deliver;\n",
      "type": "deliver"
    },
    {
      "priority": 45,
      "template": "backend F_MitSvc {\n    .between_bytes_timeout = 0.5s;\n    .connect_timeout = 1s;\n    .dynamic = true;\n    .first_byte_timeout = 1s;\n    .host = \"mitigations.netacea.net\";\n    .max_connections = 200;\n    .port = \"443\";\n    .share_key = \"NETACEAmitigations\";\n    .ssl = true;\n    .ssl_cert_hostname = \"mitigations.netacea.net\";\n    .ssl_check_cert = always;\n    .ssl_sni_hostname = \"mitigations.netacea.net\";\n    .probe = {\n        .dummy = true;\n        .initial = 5;\n        .request = \"HEAD / HTTP/1.1\"  \"Host: mitigations.netacea.net\" \"Connection: close\";\n        .threshold = 1;\n        .timeout = 2s;\n        .window = 5;\n      }\n}\n\nsub netacea_recv {\n  # Change this value to false to bypass Netacea\n  declare local var.netacea_mitSvc_enabled BOOL;\n  set var.netacea_mitSvc_enabled = true;\n  \n  unset req.http.X-Netacea-UserId;\n\n  # Unset headers Netacea Set\n  unset req.http.netacea_processed;\n  if (req.restarts == 0) {\n    unset req.http.netacea_bctype_string;\n    unset req.http.netacea_best_mitigation;\n    unset req.http.netacea_match;\n    unset req.http.netacea_mitigate;\n    unset req.http.netacea_captcha;\n  } else {\n    if (req.http.netacea_best_mitigation == \"block\") {\n      error 403;\n    }\n  }\n\n  declare local var.netacea_mitSvc_forward BOOL;\n  declare local var.netacea_mitSvc_apiKey STRING;\n  declare local var.netacea_mitSvc_secret STRING;\n\n  set var.netacea_mitSvc_apiKey = \"{{netacea_api_key}}\";\n  set var.netacea_mitSvc_secret = \"{{netacea_secret}}\";\n\n  declare local var.netacea_mitSvc_exp STRING;\n  declare local var.netacea_mitSvc_sig STRING;\n  declare local var.netacea_mitSvc_userId STRING;\n  declare local var.netacea_valid_atacookie BOOL;\n  declare local var.netacea_mitigation_code STRING;\n\n  set var.netacea_mitSvc_forward = true;\n\n  if (req.http.Cookie:_mitata) {\n    if (req.http.Cookie:_mitata ~ \"(.*)_\\/@#\\/(.*)_\\/@#\\/(.*)_\\/@#\\/((\\d)(\\d)(\\d))\") {\n      set var.netacea_valid_atacookie = true;\n      set var.netacea_mitSvc_sig = re.group.1;\n      set var.netacea_mitSvc_exp = re.group.2;\n      set var.netacea_mitSvc_userId = re.group.3;\n      set var.netacea_mitigation_code = re.group.4;\n      set req.http.netacea_match = re.group.5;\n      set req.http.netacea_mitigate = re.group.6;\n      set req.http.netacea_captcha = re.group.7;\n    } else {\n      set var.netacea_valid_atacookie = false;\n    }\n  }\n  if (req.restarts == 0) {\n    if (var.netacea_mitSvc_enabled) {\n      if (var.netacea_valid_atacookie) {\n        set var.netacea_mitSvc_forward = true;\n        if (!time.is_after(now, std.time(var.netacea_mitSvc_exp, now))) {\n          declare local var.netacea_mitSvc_stringValue STRING;\n          declare local var.netacea_mitSvc_HMAC STRING;\n          declare local var.netacea_mitSvc_B64 STRING;\n          set var.netacea_mitSvc_stringValue = var.netacea_mitSvc_exp + \"_/@#/\" + var.netacea_mitSvc_userId + \"_/@#/\" + var.netacea_mitigation_code;\n          set var.netacea_mitSvc_HMAC = digest.hmac_sha256(var.netacea_mitSvc_secret, var.netacea_mitSvc_stringValue);\n          if (var.netacea_mitSvc_HMAC ~ \"0x(.*)\") {\n            set var.netacea_mitSvc_HMAC = re.group.1;\n          }\n          set var.netacea_mitSvc_B64 = digest.base64(var.netacea_mitSvc_HMAC);\n          if (var.netacea_mitSvc_sig == var.netacea_mitSvc_B64) {\n            set var.netacea_mitSvc_forward = false;\n          }\n        }\n      }\n    } else {\n      set var.netacea_mitSvc_forward = false;\n    }\n  } else {\n     set var.netacea_mitSvc_forward = false;\n  }\n  set req.http.mitigation_user_id = var.netacea_mitSvc_userId;\n\n  if (var.netacea_mitSvc_forward) {\n    set req.backend = F_MitSvc;\n    if (req.backend.healthy) {\n      unset req.http.netacea_match;\n      unset req.http.netacea_mitigate;\n      unset req.http.netacea_captcha;\n\n      set req.http.netacea_origin_method = req.method;\n      set req.http.netacea_processed = \"1\";\n      set req.http.netacea_origin_host = req.http.host;\n      set req.http.X-Netacea-Client-IP = client.ip;\n      set req.http.netacea_origin_url = req.url;\n      if (req.url != \"/AtaVerifyCaptcha\") {\n        set req.method = \"GET\";\n        set req.url = \"/\";\n      }\n      set req.http.X-Netacea-Api-Key = var.netacea_mitSvc_apiKey;\n      return(pass);\n    }\n  }\n}\n\nsub netacea_deliver {\n  call netacea_calculate_best_mitigation;\n  \n  if (req.http.netacea_processed == \"1\") {\n    set req.http.mit_status = resp.status;\n    if (resp.status != 200) {\n      // Unset these because we're not mitigating anything.\n      set req.http.netacea_best_mitigation = \"\";\n      set req.http.netacea_bctype_string = \"\";\n    }\n    set req.http.host = req.http.netacea_origin_host;\n    set req.url = req.http.netacea_origin_url;\n    set req.method = req.http.netacea_origin_method;\n    set req.http.netacea_cookies = resp.http.set-cookie;\n    set req.http.netacea_mitata_cookie_value = resp.http.x-netacea-mitata-value;\n    set req.http.netacea_mitata_cookie_expiry = resp.http.x-netacea-mitata-expiry;\n    set req.http.netacea_mitata_captcha_cookie_value = resp.http.x-netacea-mitatacaptcha-value;\n    set req.http.netacea_mitata_captcha_cookie_expiry = resp.http.x-netacea-mitatacaptcha-expiry;\n\n    unset req.http.netacea_mitSvc_forward;\n    unset req.http.netacea_origin_url;\n    unset req.http.netacea_origin_host;\n    unset req.http.netacea_origin_method;\n    unset req.http.x-netacea-api-key;\n    call set_netacea_cookies;\n    if (req.http.netacea_best_mitigation != \"captcha\") {\n      restart;\n    }\n    set resp.status = 403;\n    set resp.http.content-type = \"text/html; charset=UTF-8\";\n    return(deliver);\n  }\n  call set_netacea_cookies;\n}\n\nsub set_netacea_cookies {\n  # Builds netacea cookies\n  if (req.http.netacea_cookies) {\n    if (req.http.netacea_mitata_cookie_value && req.http.netacea_mitata_cookie_expiry) {\n      if (req.http.netacea_mitata_cookie_value ~ \"(.*)_\\/@#\\/(.*)_\\/@#\\/(.*)_\\/@#\\/((\\d)(\\d)(\\d))\") {\n        set req.http.mitigation_user_id = re.group.3;\n      }\n      add resp.http.Set-Cookie= \"_mitata=\" + req.http.netacea_mitata_cookie_value + \"; Max-Age=\" + req.http.netacea_mitata_cookie_expiry + \"; Path=/;\";\n    }\n    if (req.http.netacea_mitata_captcha_cookie_value && req.http.netacea_mitata_captcha_cookie_expiry) {\n      add resp.http.Set-Cookie= \"_mitatacaptcha=\" + req.http.netacea_mitata_captcha_cookie_value + \"; Max-Age=\" + req.http.netacea_mitata_captcha_cookie_expiry + \"; Path=/;\";\n    }\n  }\n}\n\ntable Netacea_Match_Dict {\n  \"0\": \"\",\n  \"1\": \"ua\",\n  \"2\": \"ip\",\n  \"3\": \"visitor\",\n  \"4\": \"datacenter\",\n  \"5\": \"sev\"\n}\n\ntable Netacea_Mitigate_Dict {\n  \"0\": \"\",\n  \"1\": \"blocked\",\n  \"2\": \"allow\",\n  \"3\": \"hardblocked\"\n}\n\ntable Netacea_Best_Mitigations_Dict {\n  \"0\": \"\",\n  \"1\": \"block\",\n  \"2\": \"allow\",\n  \"3\": \"block\"\n}\n\ntable Netacea_Best_Mitigations_Captcha_Dict {\n  \"1\": \"captcha\",\n  \"2\": \"\",\n  \"3\": \"captcha\",\n  \"4\": \"\",\n  \"5\": \"captcha\"\n}\n\ntable Netacea_Captcha_Dict {\n  \"0\": \"\",\n  \"1\": \"captcha_serve\",\n  \"2\": \"captcha_pass\",\n  \"3\": \"captcha_fail\",\n  \"4\": \"captcha_cookiepass\",\n  \"5\": \"captcha_cookiefail\",\n}\n\nsub netacea_calculate_best_mitigation {\n  if (!req.http.netacea_bctype_string) {\n    declare local var.netacea_match STRING;\n    declare local var.netacea_mitigate STRING;\n    declare local var.netacea_captcha STRING;\n    declare local var.netacea_match_string STRING;\n    declare local var.netacea_mitigate_string STRING;\n    declare local var.netacea_captcha_string STRING;\n    declare local var.netacea_captcha_mitigate_string STRING;\n    \n    declare local var.netacea_best_mitigation STRING;\n    declare local var.netacea_bctype_string STRING;\n    \n    if (resp.http.x-netacea-match) { # If netacea mitigation service returns a match, use this\n      set var.netacea_match = resp.http.x-netacea-match;\n    } elseif (req.http.netacea_match) { # If cookie has a match, use this\n      set var.netacea_match = req.http.netacea_match;\n    } else {\n      set var.netacea_match = \"0\";\n    }\n\n    if (resp.http.x-netacea-mitigate) { # If netacea mitigation service returns a mitigate, use this\n      set var.netacea_mitigate = resp.http.x-netacea-mitigate;\n    } elseif (req.http.netacea_mitigate) { # If cookie has a mitigate, use this\n      set var.netacea_mitigate = req.http.netacea_mitigate;\n    } else {\n      set var.netacea_mitigate = \"0\";\n    }\n\n    if (resp.http.x-netacea-captcha) { # If netacea mitigation service returns a captcha, use this\n      set var.netacea_captcha = resp.http.x-netacea-captcha;\n    } elseif (req.http.netacea_captcha) { # If cookie has a captcha, use this\n      set var.netacea_captcha = req.http.netacea_captcha;\n    } else {\n      set var.netacea_captcha = \"0\";\n    }\n\n\n    # IP, UA, Visitor, Datacentre etc\n    if (var.netacea_match) {\n      set var.netacea_match_string = table.lookup(Netacea_Match_Dict, var.netacea_match, \"unknown\");\n\n      if (var.netacea_match_string != \"\") {\n        set var.netacea_bctype_string = var.netacea_match_string + \"_\";\n      }\n    }\n\n    # BLOCK, TRUST, HARDBLOCK etc\n    if (var.netacea_mitigate) {\n      set var.netacea_mitigate_string = table.lookup(Netacea_Mitigate_Dict, var.netacea_mitigate, \"unknown\");\n\n      if (var.netacea_mitigate_string != \"\") {\n        set var.netacea_bctype_string = var.netacea_bctype_string + var.netacea_mitigate_string;\n      }\n\n      set var.netacea_best_mitigation = table.lookup(Netacea_Best_Mitigations_Dict, var.netacea_mitigate, \"no-best-mitigation\");\n      if (var.netacea_best_mitigation == \"no-best-mitigation\") {\n        set var.netacea_best_mitigation = \"\";\n      }\n    }\n\n    if (var.netacea_captcha) {\n      # 2 and 3 can only be set on /AtaVerifyCaptcha requests\n      # If it's not 2 or 3 then set them to the cookie variant\n      if (req.url != \"/AtaVerifyCaptcha\") { \n        if (var.netacea_captcha == \"2\") { \n          set var.netacea_captcha = \"4\";\n        } elseif (var.netacea_captcha == \"3\") {\n          set var.netacea_captcha = \"5\";\n        }\n      }\n      set var.netacea_captcha_string = table.lookup(Netacea_Captcha_Dict, var.netacea_captcha, \"unknown\");\n\n      if (var.netacea_captcha_string != \"\") {\n        set var.netacea_bctype_string = var.netacea_bctype_string + \",\" + var.netacea_captcha_string;\n      }\n      set var.netacea_captcha_mitigate_string = table.lookup(Netacea_Best_Mitigations_Captcha_Dict, var.netacea_captcha, \"no-best-captcha-mitigation\");\n      set req.http.captcha_mitigate_thing = var.netacea_captcha_mitigate_string;\n      if (var.netacea_captcha_mitigate_string != \"no-best-captcha-mitigation\") {\n        set var.netacea_best_mitigation = var.netacea_captcha_mitigate_string;\n      }\n    }\n\n    set req.http.netacea_bctype_string = var.netacea_bctype_string;\n    set req.http.netacea_best_mitigation = var.netacea_best_mitigation;\n\n    # Unset x-netacea headers\n    unset resp.http.x-netacea-match;\n    unset resp.http.x-netacea-mitigate;\n    unset resp.http.x-netacea-captcha;\n\n  }\n}\n",
      "type": "init"
    }
  ],
  "version": 2
}
